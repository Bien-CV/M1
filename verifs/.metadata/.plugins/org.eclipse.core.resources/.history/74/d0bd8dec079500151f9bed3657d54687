package tests;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;

import fr.univnantes.cta.CompassDirection;
import fr.univnantes.cta.impl.AirwayImpl;
import fr.univnantes.cta.impl.FlightPlanImpl;
import fr.univnantes.cta.impl.LatitudeImpl;
import fr.univnantes.cta.impl.LongitudeImpl;
import fr.univnantes.cta.impl.PositionImpl;
import fr.univnantes.cta.impl.TakenAirwayImpl;
import fr.univnantes.cta.impl.VORImpl;

public class FlightPlan_Test {
	protected FlightPlanImpl fp;
	protected TakenAirwayImpl a;

	@Before
	public void setUp() throws Exception {
		FlightPlanImpl fp = new FlightPlanImpl();
		LatitudeImpl lat1 = new LatitudeImpl(1, 0, 0, CompassDirection.EAST);
		LatitudeImpl lat2 = new LatitudeImpl(2, 0, 0, CompassDirection.EAST);
		LatitudeImpl lat3 = new LatitudeImpl(3, 0, 0, CompassDirection.EAST);
		LatitudeImpl lat4 = new LatitudeImpl(4, 0, 0, CompassDirection.EAST);
		
		LongitudeImpl long1 = new LongitudeImpl(0, 0, 1, CompassDirection.EAST);
		
		
		Position pos1 = new PositionImpl(latitude, longitude)
		VOR_Test vor1 = new VORImpl("vor1", position)
		Airway airway1 = new AirwayImpl(s, st)
		a = new TakenAirwayImpl(airway1, 0, CompassDirection.NORTH);
		when(a.getAirway()).thenReturn()
		
	}

	@Test
	public void testFlightPlanImpl() {		
		assertNotNull(fp);
	}

	@Test
	public void testAddAirwayEmptyPath() {
		fp.addAirway(a);
		assertTrue(fp.getPath().contains(a));

	}

	@Test
	public void testDistance() {
		fp.distance();
	}

	@Test
	public void testGetPath() {
		fp.getPath();
	}

}
